{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://mistakia.github.io/react-table/schema/columns/column-definition.json",
  "title": "ColumnDefinition",
  "type": "object",
  "properties": {
    "column_id": {
      "type": "string",
      "description": "Unique identifier for the column"
    },
    "column_name": {
      "type": "string",
      "description": "Alternative name for the column"
    },
    "id": { "type": "string", "description": "Alternative identifier" },
    "accessorKey": {
      "type": "string",
      "description": "Key to access data in the row object"
    },
    "accessorFn": {
      "type": "object",
      "description": "Function to extract and transform data from the row object for this column",
      "properties": {
        "function": {
          "type": "string",
          "description": "Function signature: (row: RowData, index: number) => any"
        },
        "parameters": {
          "type": "object",
          "properties": {
            "row": {
              "$ref": "../models/row-data.json",
              "description": "The complete row data object containing all column values"
            },
            "index": {
              "type": "number",
              "description": "The zero-based index of this row in the current data array"
            }
          }
        },
        "returns": {
          "type": "string",
          "description": "any - The processed value to display in this column cell"
        }
      },
      "examples": [
        "function(row, index) { return row.firstName + ' ' + row.lastName; }",
        "(row) => row.stats?.points || 0",
        "(row, index) => ({ value: row.score, rank: index + 1 })"
      ]
    },
    "header": {
      "type": "string",
      "description": "Header text displayed in the column header"
    },
    "header_label": {
      "type": "string",
      "description": "Label displayed in the header"
    },
    "column_title": {
      "type": "string",
      "description": "Display title for the column in UI and exports"
    },
    "description": {
      "type": "string",
      "description": "Tooltip description for the column header"
    },
    "data_type": {
      "$ref": "../base/table-data-types.json",
      "description": "Data type of the column values"
    },
    "size": {
      "type": "number",
      "description": "Default size/width of the column in pixels"
    },
    "minWidth": {
      "type": "number",
      "description": "Minimum width of the column",
      "default": 50
    },
    "width": {
      "type": "number",
      "description": "Default width of the column",
      "default": 150
    },
    "maxWidth": {
      "type": "number",
      "description": "Maximum width of the column",
      "default": 400
    },
    "hidden": {
      "type": "boolean",
      "description": "Whether the column is hidden by default"
    },
    "sticky": {
      "type": "boolean",
      "description": "Whether the column should stick to the left side when scrolling horizontally"
    },
    "sortType": {
      "type": "string",
      "description": "Sorting algorithm to use for this column",
      "default": "alphanumericFalsyLast"
    },
    "fixed": {
      "type": "integer",
      "description": "Number of decimal places to display for numeric values"
    },
    "reverse_percentiles": {
      "type": "boolean",
      "description": "Whether to reverse the percentile coloring (lower values = better)"
    },
    "operators": {
      "type": "array",
      "items": { "$ref": "../base/table-operators.json" },
      "description": "Available filter operators for this column"
    },
    "column_params": {
      "type": "object",
      "patternProperties": {
        "^[a-zA-Z_][a-zA-Z0-9_]*$": { "$ref": "./column-parameter.json" }
      },
      "description": "Parameters that can be configured for this column"
    },
    "column_values": {
      "type": "array",
      "items": { "type": "string" },
      "description": "Available values for SELECT type columns and filter dropdowns"
    },
    "component": {
      "type": "object",
      "description": "React component to render custom cell content for this column",
      "properties": {
        "component": {
          "type": "string",
          "description": "React component signature: React.ComponentType<CellComponentProps>"
        },
        "props": {
          "type": "object",
          "properties": {
            "value": {
              "description": "The processed cell value (result of accessorFn or accessorKey)"
            },
            "row": {
              "$ref": "../models/row-data.json",
              "description": "The complete row data object"
            },
            "column": {
              "$ref": "./column-definition.json",
              "description": "The full column definition object"
            },
            "table": {
              "type": "object",
              "description": "Reference to the table instance with methods and state"
            },
            "index": {
              "type": "number",
              "description": "Row index in the current data array"
            }
          }
        }
      },
      "examples": [
        "function CellComponent({ value, row, column }) { return <span className='custom-cell'>{value}</span>; }",
        "({ value, row }) => <img src={row.avatar} alt={value} />",
        "(props) => <CustomChart data={props.row.chartData} />"
      ]
    },
    "cell": {
      "type": "object",
      "description": "Cell renderer function or component for custom cell content display",
      "properties": {
        "function": {
          "type": "string",
          "description": "Function signature: (cellProps: CellProps) => React.ReactNode"
        },
        "parameters": {
          "type": "object",
          "properties": {
            "cellProps": {
              "type": "object",
              "properties": {
                "getValue": {
                  "type": "function",
                  "description": "Function to get the cell value: () => any"
                },
                "row": {
                  "type": "object",
                  "description": "Row object with original data and metadata"
                },
                "column": {
                  "type": "object",
                  "description": "Column object with definition and methods"
                },
                "table": {
                  "type": "object",
                  "description": "Table instance with state and methods"
                },
                "cell": {
                  "type": "object",
                  "description": "Cell instance with metadata and methods"
                }
              }
            }
          }
        },
        "returns": {
          "type": "string",
          "description": "React.ReactNode - JSX element, string, number, or null"
        }
      },
      "examples": [
        "function({ getValue, row }) { return <strong>{getValue()}</strong>; }",
        "({ getValue, row, column }) => getValue() > 100 ? <span className='high'>{getValue()}</span> : getValue()",
        "(props) => <CustomComponent value={props.getValue()} rowData={props.row.original} />"
      ]
    },
    "header_renderer": {
      "type": "object",
      "description": "Custom header renderer function or component for column headers",
      "properties": {
        "function": {
          "type": "string",
          "description": "Function signature: (headerProps: HeaderProps) => React.ReactNode"
        },
        "parameters": {
          "type": "object",
          "properties": {
            "headerProps": {
              "type": "object",
              "properties": {
                "column": {
                  "$ref": "./column-definition.json",
                  "description": "The complete column definition object"
                },
                "header": {
                  "type": "object",
                  "description": "Header instance with sorting and filtering methods"
                },
                "table": {
                  "type": "object",
                  "description": "Table instance with global state and methods"
                }
              }
            }
          }
        },
        "returns": {
          "type": "string",
          "description": "React.ReactNode - Custom header content"
        }
      },
      "examples": [
        "function({ column }) { return <div><Icon /> {column.header_label}</div>; }",
        "({ column, header }) => <CustomHeaderWidget column={column} sortable={header.column.getCanSort()} />",
        "(props) => <Tooltip content={props.column.description}>{props.column.header_label}</Tooltip>"
      ]
    },
    "footer": {
      "type": "object",
      "description": "Footer renderer function or component for column footers with aggregations",
      "properties": {
        "function": {
          "type": "string",
          "description": "Function signature: (footerProps: FooterProps) => React.ReactNode"
        },
        "parameters": {
          "type": "object",
          "properties": {
            "footerProps": {
              "type": "object",
              "properties": {
                "column": {
                  "$ref": "./column-definition.json",
                  "description": "The complete column definition object"
                },
                "header": {
                  "type": "object",
                  "description": "Header instance with column methods"
                },
                "table": {
                  "type": "object",
                  "description": "Table instance with access to all data"
                }
              }
            }
          }
        },
        "returns": {
          "type": "string",
          "description": "React.ReactNode - Footer content (typically aggregated values)"
        }
      },
      "examples": [
        "function({ table, column }) { const total = table.getRowModel().rows.reduce((sum, row) => sum + row.getValue(column.id), 0); return <strong>Total: {total}</strong>; }",
        "({ table, column }) => `Avg: ${calculateAverage(table.getRowModel().rows, column.id)}`",
        "(props) => <AggregationWidget data={props.table.getRowModel().rows} column={props.column} />"
      ]
    },
    "is_split": {
      "type": "boolean",
      "description": "Whether this is a split column"
    },
    "prefix": {
      "type": "boolean",
      "description": "Whether this is a prefix column"
    },
    "index": {
      "type": "integer",
      "description": "Index position of the column"
    },
    "group": {
      "type": "string",
      "description": "Group name for column grouping"
    },
    "column_index": {
      "type": "integer",
      "description": "Index position for duplicate column IDs"
    },
    "is_sortable": {
      "type": "boolean",
      "description": "Whether this column can be sorted"
    }
  },
  "required": ["column_id"]
}
