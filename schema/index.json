{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://mistakia.github.io/react-table/schema/index.json",
  "title": "React Table Component Schema",
  "description": "JSON Schema specification for the react-table component props and column definitions",
  "type": "object",
  "properties": {
    "data": {
      "type": "array",
      "items": { "$ref": "./models/row-data.json" },
      "description": "Array of row data objects",
      "default": []
    },
    "table_state": {
      "$ref": "./state/table-state.json",
      "description": "Current table state configuration",
      "default": {}
    },
    "saved_table_state": {
      "oneOf": [{ "$ref": "./state/table-state.json" }, { "type": "null" }],
      "description": "Saved table state for comparison",
      "default": null
    },
    "all_columns": {
      "type": "object",
      "patternProperties": {
        ".*": { "$ref": "./columns/column-definition.json" }
      },
      "description": "Object containing all available column definitions keyed by column_id",
      "default": {}
    },
    "selected_view": {
      "$ref": "./view/view.json",
      "description": "Currently selected view configuration",
      "default": {}
    },
    "views": {
      "type": "array",
      "items": { "$ref": "./view/view.json" },
      "description": "Array of available views",
      "default": []
    },
    "percentiles": {
      "$ref": "./models/percentiles.json",
      "description": "Percentile data for columns (used for cell coloring)",
      "default": {}
    },
    "metadata": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Creation timestamp"
        }
      },
      "description": "Additional metadata for the table",
      "default": {}
    },
    "style": {
      "type": "object",
      "description": "CSS style object for the table container",
      "default": {}
    },
    "total_row_count": {
      "type": "integer",
      "description": "Total number of rows available (for pagination)"
    },
    "total_rows_fetched": {
      "type": "integer",
      "description": "Number of rows currently fetched"
    },
    "is_loading": {
      "type": "boolean",
      "description": "Whether the table is in loading state",
      "default": false
    },
    "is_fetching": {
      "type": "boolean",
      "description": "Whether data is being fetched",
      "default": false
    },
    "is_fetching_more": {
      "type": "boolean",
      "description": "Whether more data is being fetched for infinite scroll",
      "default": false
    },
    "disable_create_view": {
      "type": "boolean",
      "description": "Whether to disable view creation",
      "default": false
    },
    "disable_edit_view": {
      "type": "boolean",
      "description": "Whether to disable view editing",
      "default": false
    },
    "disable_rank_aggregation": {
      "type": "boolean",
      "description": "Whether to disable rank aggregation controls",
      "default": false
    },
    "disable_splits": {
      "type": "boolean",
      "description": "Whether to disable splits functionality",
      "default": false
    },
    "enable_duplicate_column_ids": {
      "type": "boolean",
      "description": "Whether to allow duplicate column IDs with different parameters",
      "default": false
    },
    "is_selected_view_editable": {
      "type": "boolean",
      "description": "Whether the currently selected view can be edited",
      "default": false
    },
    "table_username": {
      "type": "string",
      "description": "Username for table operations",
      "default": "system"
    },
    "new_view_prefix_columns": {
      "type": "array",
      "items": { "type": "string" },
      "description": "Default prefix columns for new views",
      "default": []
    },
    "on_view_change": {
      "type": "object",
      "description": "Callback function invoked when the view configuration changes",
      "properties": {
        "function": {
          "type": "string",
          "description": "Function signature: (view: View) => void"
        },
        "parameters": {
          "type": "object",
          "properties": {
            "view": {
              "$ref": "./view/view.json",
              "description": "The new view object that was selected or changed"
            }
          }
        },
        "returns": {
          "type": "string",
          "description": "void - No return value expected"
        }
      },
      "default": "function() {}",
      "examples": [
        "function(view) { console.log('View changed to:', view.view_name); }",
        "(view) => { updateUrlWithView(view.view_id); }"
      ]
    },
    "on_save_view": {
      "type": "object",
      "description": "Callback function invoked when a view is saved (created or updated)",
      "properties": {
        "function": {
          "type": "string",
          "description": "Function signature: (view: View, isNew: boolean) => Promise<void> | void"
        },
        "parameters": {
          "type": "object",
          "properties": {
            "view": {
              "$ref": "./view/view.json",
              "description": "The view object being saved with all current configurations"
            },
            "isNew": {
              "type": "boolean",
              "description": "True if this is a new view creation, false if updating existing view"
            }
          }
        },
        "returns": {
          "type": "string",
          "description": "void | Promise<void> - Can be async for server operations"
        }
      },
      "default": "function() {}",
      "examples": [
        "function(view, isNew) { saveViewToServer(view, isNew); }",
        "async (view, isNew) => { await api.saveView(view); refreshViews(); }"
      ]
    },
    "select_view": {
      "type": "object",
      "description": "Callback function to programmatically select and load a specific view",
      "properties": {
        "function": {
          "type": "string",
          "description": "Function signature: (viewId: string) => Promise<void> | void"
        },
        "parameters": {
          "type": "object",
          "properties": {
            "viewId": {
              "type": "string",
              "description": "The unique identifier of the view to select and activate"
            }
          }
        },
        "returns": {
          "type": "string",
          "description": "void | Promise<void> - Can be async for loading view data"
        }
      },
      "default": "function() {}",
      "examples": [
        "function(viewId) { loadView(viewId); updateActiveView(viewId); }",
        "async (viewId) => { const view = await api.getView(viewId); setSelectedView(view); }"
      ]
    },
    "delete_view": {
      "type": "object",
      "description": "Callback function to delete a view and handle cleanup operations",
      "properties": {
        "function": {
          "type": "string",
          "description": "Function signature: (viewId: string) => Promise<boolean> | boolean"
        },
        "parameters": {
          "type": "object",
          "properties": {
            "viewId": {
              "type": "string",
              "description": "The unique identifier of the view to delete"
            }
          }
        },
        "returns": {
          "type": "string",
          "description": "boolean | Promise<boolean> - True if deletion successful, false otherwise"
        }
      },
      "default": "function() {}",
      "examples": [
        "function(viewId) { return confirmDelete() && removeView(viewId); }",
        "async (viewId) => { const confirmed = await showDeleteDialog(); if (confirmed) { await api.deleteView(viewId); return true; } return false; }"
      ]
    },
    "fetch_more": {
      "type": "object",
      "description": "Callback function to fetch additional data for infinite scrolling or pagination",
      "properties": {
        "function": {
          "type": "string",
          "description": "Function signature: (offset: number, limit: number, currentData: Array<any>) => Promise<Array<any>>"
        },
        "parameters": {
          "type": "object",
          "properties": {
            "offset": {
              "type": "number",
              "description": "The starting index for the next batch of data to fetch"
            },
            "limit": {
              "type": "number",
              "description": "The maximum number of records to fetch in this batch"
            },
            "currentData": {
              "type": "array",
              "items": { "$ref": "./models/row-data.json" },
              "description": "The currently loaded data array for context"
            }
          }
        },
        "returns": {
          "type": "string",
          "description": "Promise<Array<RowData>> - Array of new row data objects to append"
        }
      },
      "default": "function() {}",
      "examples": [
        "async function(offset, limit, currentData) { return await api.fetchRows(offset, limit); }",
        "(offset, limit) => fetch(`/api/data?offset=${offset}&limit=${limit}`).then(r => r.json())"
      ]
    },
    "shorten_url": {
      "type": "object",
      "description": "Function to convert long URLs into shortened versions for sharing table views",
      "properties": {
        "function": {
          "type": "string",
          "description": "Function signature: (longUrl: string) => Promise<string> | string"
        },
        "parameters": {
          "type": "object",
          "properties": {
            "longUrl": {
              "type": "string",
              "description": "The full URL containing table state and view parameters to be shortened"
            }
          }
        },
        "returns": {
          "type": "string",
          "description": "string | Promise<string> - The shortened URL"
        }
      },
      "examples": [
        "function(longUrl) { return bitly.shorten(longUrl); }",
        "async (longUrl) => { const response = await fetch('/api/shorten', { method: 'POST', body: JSON.stringify({ url: longUrl }) }); return response.text(); }"
      ]
    },
    "reset_cache": {
      "type": "object",
      "description": "Function to clear cached data and force fresh data loading",
      "properties": {
        "function": {
          "type": "string",
          "description": "Function signature: (cacheKeys?: Array<string>) => void"
        },
        "parameters": {
          "type": "object",
          "properties": {
            "cacheKeys": {
              "type": "array",
              "items": { "type": "string" },
              "description": "Optional array of specific cache keys to clear. If not provided, clears all table-related cache"
            }
          }
        },
        "returns": {
          "type": "string",
          "description": "void - No return value"
        }
      },
      "examples": [
        "function(cacheKeys) { cacheKeys ? clearSpecificCache(cacheKeys) : clearAllCache(); }",
        "() => { localStorage.removeItem('tableCache'); sessionStorage.clear(); }"
      ]
    },
    "get_export_api_url": {
      "type": "object",
      "description": "Function to generate the API endpoint URL for data export operations",
      "properties": {
        "function": {
          "type": "string",
          "description": "Function signature: (format: string, tableState: TableState, options: ExportOptions) => string"
        },
        "parameters": {
          "type": "object",
          "properties": {
            "format": {
              "type": "string",
              "enum": ["csv", "json", "markdown", "html", "tsv"],
              "description": "The desired export format"
            },
            "tableState": {
              "$ref": "./state/table-state.json",
              "description": "Current table state including filters, sorts, and column selection"
            },
            "options": {
              "$ref": "./export/export-options.json",
              "description": "Export configuration options"
            }
          }
        },
        "returns": {
          "type": "string",
          "description": "string - The complete API URL for the export request"
        }
      },
      "default": "function() {}",
      "examples": [
        "function(format, tableState, options) { return `/api/export/${format}?state=${encodeURIComponent(JSON.stringify(tableState))}`; }",
        "(format, tableState, options) => buildExportUrl({ format, filters: tableState.where, columns: tableState.columns, ...options })"
      ]
    },
    "get_scatter_point_label": {
      "type": "object",
      "description": "Function to generate labels for data points in scatter plot visualizations",
      "properties": {
        "function": {
          "type": "string",
          "description": "Function signature: (row: RowData, xColumn: ColumnDefinition, yColumn: ColumnDefinition) => string"
        },
        "parameters": {
          "type": "object",
          "properties": {
            "row": {
              "$ref": "./models/row-data.json",
              "description": "The data row object containing all column values for this point"
            },
            "xColumn": {
              "$ref": "./columns/column-definition.json",
              "description": "The column definition for the X-axis data"
            },
            "yColumn": {
              "$ref": "./columns/column-definition.json",
              "description": "The column definition for the Y-axis data"
            }
          }
        },
        "returns": {
          "type": "string",
          "description": "string - The label text to display for this scatter plot point"
        }
      },
      "default": "function(row) { return '' }",
      "examples": [
        "function(row, xColumn, yColumn) { return row.name || row.id || 'Point'; }",
        "(row, xColumn, yColumn) => `${row[xColumn.accessorKey]}, ${row[yColumn.accessorKey]}`",
        "(row) => `${row.player_name} (${row.team})`"
      ]
    },
    "get_scatter_point_image": {
      "type": "object",
      "description": "Function to generate image URLs or image elements for scatter plot data points",
      "properties": {
        "function": {
          "type": "string",
          "description": "Function signature: (row: RowData, xColumn: ColumnDefinition, yColumn: ColumnDefinition) => string | HTMLImageElement | null"
        },
        "parameters": {
          "type": "object",
          "properties": {
            "row": {
              "$ref": "./models/row-data.json",
              "description": "The data row object containing all column values for this point"
            },
            "xColumn": {
              "$ref": "./columns/column-definition.json",
              "description": "The column definition for the X-axis data"
            },
            "yColumn": {
              "$ref": "./columns/column-definition.json",
              "description": "The column definition for the Y-axis data"
            }
          }
        },
        "returns": {
          "type": "string",
          "description": "string | HTMLImageElement | null - Image URL, image element, or null for no image"
        }
      },
      "examples": [
        "function(row, xColumn, yColumn) { return row.avatar_url || row.image_url; }",
        "(row) => row.team_logo ? `/images/teams/${row.team_logo}` : null",
        "(row) => { const img = new Image(); img.src = row.photo_url; return img; }"
      ]
    },
    "is_scatter_plot_point_label_enabled": {
      "type": "object",
      "description": "Function to conditionally enable or disable labels for scatter plot points",
      "properties": {
        "function": {
          "type": "string",
          "description": "Function signature: (row: RowData, xColumn: ColumnDefinition, yColumn: ColumnDefinition, plotConfig: object) => boolean"
        },
        "parameters": {
          "type": "object",
          "properties": {
            "row": {
              "$ref": "./models/row-data.json",
              "description": "The data row object for this scatter plot point"
            },
            "xColumn": {
              "$ref": "./columns/column-definition.json",
              "description": "The column definition for the X-axis data"
            },
            "yColumn": {
              "$ref": "./columns/column-definition.json",
              "description": "The column definition for the Y-axis data"
            },
            "plotConfig": {
              "type": "object",
              "description": "Current scatter plot configuration and display settings"
            }
          }
        },
        "returns": {
          "type": "string",
          "description": "boolean - True to show labels for this point, false to hide"
        }
      },
      "default": "function() { return true }",
      "examples": [
        "function(row, xColumn, yColumn, plotConfig) { return plotConfig.showLabels && row.highlight; }",
        "(row) => row.is_featured || row.rank <= 10",
        "(row, xColumn, yColumn, plotConfig) => plotConfig.labelThreshold ? row[yColumn.accessorKey] > plotConfig.labelThreshold : true"
      ]
    },
    "export_options": {
      "$ref": "./export/export-options.json",
      "description": "Configuration options for data export functionality"
    },
    "table_context": {
      "$ref": "./context/table-context-properties.json",
      "description": "Additional context properties available to table components"
    },
    "cell_click_behavior": {
      "type": "string",
      "enum": ["clipboard", "none"],
      "default": "clipboard",
      "description": "Behavior when clicking on cells"
    }
  },
  "examples": [
    {
      "data": [
        {
          "id": 1,
          "name": "John Doe",
          "age": 30,
          "email": "john@example.com",
          "className": "highlighted-row"
        }
      ],
      "all_columns": {
        "name": {
          "column_id": "name",
          "header_label": "Full Name",
          "description": "The person's full name",
          "data_type": 2,
          "accessorKey": "name",
          "width": 200,
          "operators": ["=", "LIKE", "IS NULL"]
        },
        "age": {
          "column_id": "age",
          "header_label": "Age",
          "data_type": 1,
          "accessorKey": "age",
          "width": 80,
          "fixed": 0,
          "operators": ["=", ">", "<", ">=", "<="]
        }
      },
      "table_state": {
        "columns": ["name", "age"],
        "sort": [
          {
            "column_id": "name",
            "desc": false
          }
        ],
        "where": [
          {
            "column_id": "age",
            "operator": ">=",
            "value": 18
          }
        ]
      },
      "selected_view": {
        "view_id": "default",
        "view_name": "Default View",
        "view_filters": ["name"]
      }
    }
  ]
}
